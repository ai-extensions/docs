{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AI-Extension Application Hub - User Manual","text":""},{"location":"#purpose","title":"Purpose","text":"<p>The AI-Extensions project aims at supporting the Earth Science and Services Communities by expanding the existing Earth Observation (EO) platform offerings services with operationally mature AI/ML software capabilities. This is achieved through the AI-Extension Application Hub, a dedicated Cloud platform that provides the integration and operational implementation of EO and AI capabilities.  </p> <p>This User Manual provides a guideline, as well as step-by-step instructions, for developers and consumers to effectively leverage the AI-Extension Application Hub. </p>"},{"location":"#registration","title":"Registration","text":"<ul> <li>App Hub URL: https://app-hub-ai-extensions-dev.terradue.com/</li> <li>User Registration: add steps</li> <li>JupyterHub - Server Options: different options can be configured for your username. These will be visible on the JupyterHub dashboard after login. In the example shown below, two server options are available. You can click on one (e.g. \"Machine Learning Lab 0.10 Large (12GB RAM)\") and click on <code>Start</code> to launch it. </li> </ul>"},{"location":"#applications","title":"Applications","text":""},{"location":"#jupyterlab","title":"JupyterLab","text":"<p>After loading up, the JupyterLab dashboard will appear.</p> <p></p>"},{"location":"#code-server","title":"Code Server","text":"<p>Code Server enables the user to run Visual Studio Code (VS Code) and all its functionalities directly from the Application Hub. </p> <p>On the JupyterLab dashboard, click on the Code Server Logo.</p> <p></p> <p>The Code Server dashboard will appear.</p> <p></p> <p>You have access of all these functionalities from the vertical panel in the top-left corner of the dashboard: * Menu: access functions and settings within VS Code * Explore: navigate and manage files and directories in your workspace  * Search: find specific files, text, or symbols within your workspace * Source Control: manage version control system such as Git directly within VS Code * Run and Debug: execute and debug code with built-in tools * Extensions: enhance functionality by installing and managing extensions to support the development workflow  * Test: run tests and view test outptus </p>"},{"location":"#ml-flow","title":"ML-Flow","text":"<p><code>MLflow</code> is a powerful open-source platform that simplifies the end-to-end machine learning (ML) lifecycle management. It provides tools for tracking experiments, model hyperparameters, packaging code into reproducible runs, and sharing and deploying models across different environments seamlessly. <code>MLflow</code> enables users to effectively organize and monitor their ML projects, enabling collaboration, reproducibility, and streamlined deployment workflows.</p> <p>On the JupyterLab dashboard, click on the <code>mlflow</code> Logo.</p> <p></p> <p>The <code>MLflow</code> dashboard will appear.</p> <p></p> <p>Below are a few examples of using <code>MLflow</code> in a ML project workflow: * The user can select one or multiple runs to Compare</p> <p></p> <ul> <li>The user can see a quick overview of each run and select which parameter(s) to analyse and plot on the graph</li> </ul> <p></p> <ul> <li>The user compares different parameteres fed to the CNN model</li> </ul> <p></p> <ul> <li>The user compares evaluation metrics of each run, to opt for the best model for his/her application. </li> </ul> <p></p> <pre><code>\n</code></pre>"},{"location":"#qgis","title":"QGIS","text":""},{"location":"#functionalities","title":"Functionalities","text":""},{"location":"#connection-to-stac-api","title":"Connection to STAC API","text":"<p>A dedicated STAC API endpoint was configured and can be access from the App Hub by providing the appropriate authorisation <code>headers</code>.  <pre><code>cat = Client.open(\"https://ai-extensions-stac.terradue.com\", headers=headers, ignore_conformance=True)\n</code></pre> To show the available collections in the Catalog. <pre><code>[c for c in cat.get_collections()]\n\n[&lt;CollectionClient id=ai-extensions-svv-dataset-labels&gt;,\n &lt;CollectionClient id=sentinel-s2-l2a-cogs&gt;,\n &lt;CollectionClient id=EUROSAT_2024_dataset&gt;,\n &lt;CollectionClient id=gisat-col&gt;]\n</code></pre></p>"},{"location":"#access-to-aws-s3","title":"Access to AWS s3","text":"<p>A dedicated Amazon S3 storage is pre-configured to be accessed from the App Hub. This can be done with the Amazon Web Server (AWS) <code>aws s3</code> commands in the AWS CLI.</p> <p>For example, to list the content of a specific S3 bucket, you can use the command below. <pre><code>aws s3 ls &lt;bucket_name&gt;\n</code></pre> Other examples with full syntax on using the <code>aws s3</code> command are described in the official AWS website.</p>"},{"location":"configuration-example/","title":"Configuration","text":""},{"location":"configuration-example/#profiles","title":"Profiles","text":"<p>A profile entry is defined as an entry in the <code>config.yml</code> file:</p> <pre><code>profiles:\n- id: profile_1\n  ...\n- id: profile_2\n  ...\n</code></pre> <p>A profile is defined with:</p> <pre><code># an identifier\nid: profile_1\n# the group(s) this profile is included in:\ngroups:\n- group-A\n- group-B\n# a definition block, see config c.KubeSpawner.profile_list in the kubespawner documentation\ndefinition:\n    display_name: Profile 1\n    slug: profile_1_slug\n    default: False\n    kubespawner_override:\n        cpu_limit: 4\n        mem_limit: 8G\n        image: eoepca/iat-jupyterlab:main\n# the default URL to redirect (optional)\ndefault_url: \"lab\"\n# spawned pod environment variables (optional)\npod_env_vars:\n    A: 10\n    B: 20\n    GITLAB_TOKEN:\n      from_config_map:\n        name: gitlabenv\n        key: GITLAB_TOKEN\n# a list of volumes (optional)\nvolumes: []\n# a list of config maps (optional)\nconfig_maps: []\n# kubernetes node pool selector\nnode_selector: {}\n</code></pre>"},{"location":"configuration-example/#understanding-the-groups","title":"Understanding the groups","text":"<p>The <code>groups</code> element allows a granular access to different apps.</p> <p>Users and groups can be managed via UI in the <code>/hub/admin</code> deployment URL or via API (see https://jupyterhub.readthedocs.io/en/stable/reference/rest-api.html#/)</p> <p>With a configuration like:</p> <pre><code>profiles:\n- id: profile_1\n  groups:\n  - group-A\n  - group-B\n  definition:\n  ...\n- id: profile_2\n  groups:\n  - group-B\n  definition:\n  ...\n</code></pre> <p>A user that belongs to <code>group-A</code> is:</p> <ul> <li>able to spawn the application defined in the <code>profile_1</code>.</li> <li>not able to spawn the application defined in the <code>profile_2</code>.</li> </ul> <p>A user belonging to <code>group-B</code> is:</p> <ul> <li>able to spawn the application defined in the <code>profile_1</code>.</li> <li>able to spawn the application defined in the <code>profile_2</code>.</li> </ul>"},{"location":"configuration-example/#profile-definition","title":"Profile definition","text":"<p>A <code>profile definition</code> example is shown below:</p> <pre><code>definition:\n  display_name: Profile 1\n  slug: profile_1_slug\n  default: False\n  kubespawner_override:\n    cpu_limit: 4\n    mem_limit: 8G\n    image: eoepca/iat-jupyterlab:main\n</code></pre> <p>The <code>kubespawner_override</code> can also include <code>extra_resource_limits</code> and <code>extra_resource_guarantees</code> to provide GPUs:</p> <pre><code>kubespawner_override:\n  cpu_limit: 4\n  mem_limit: 8G\n  image: eoepca/iat-jupyterlab:main\n  extra_resource_limits: {\"nvidia.com/gpu\": \"1\"}\n  extra_resource_guarantees: {\"nvidia.com/gpu\": \"1\"}\n</code></pre>"},{"location":"configuration-example/#environment-variables","title":"Environment variables","text":"<p>Environment variables can be defined by</p> <ul> <li>Providing a fixed global value, or</li> <li>Referencing a key in a config map (which must exist in the same Kubernetes namespace,   e.g. an individual user's namespace)</li> </ul> <p>The two ways of defining environment variables work as follows (global and specific):</p> <pre><code>pod_env_vars:\n  global: global_value\n  specific:\n    from_config_map:\n      name: config_map_name\n      key: config_map_key\n</code></pre>"},{"location":"configuration-example/#volumes","title":"Volumes","text":"<p>A volume is defined with:</p> <pre><code>name: volume-workspace\nclaim_name: claim-workspace\nsize: 10Gi\nstorage_class: \"scw-bssd\"\naccess_modes:\n- \"ReadWriteOnce\"\nvolume_mount:\n  name: volume-workspace\n  mount_path: \"/workspace\"\npersist: true\n</code></pre> <p>Note: if the PVC does not exist it is created.</p> <p>If the <code>persist</code> boolean flag is set to <code>false</code>, both the PVC and Volume are deleted.</p>"},{"location":"configuration-example/#configmaps","title":"ConfigMaps","text":"<p>An existing configMap to be mounted on the spawned pod is defined with:</p> <pre><code>name: aws-credentials\nkey: aws-credentials\nmount_path: /home/jovyan/.aws/credentials\ndefault_mode: 0660\nreadonly: true\n</code></pre> <p>A new configMap with the content inline to be mounted on the spawned pod is defined with:</p> <pre><code>name: aws-credentials\nkey: aws-credentials\nmount_path: /home/jovyan/.aws/credentials\ndefault_mode: 0660\nreadonly: true\ncontent: -|\n  [default]\n  aws_access_key_id=5...b\n  aws_secret_access_key=c7...3\n</code></pre>"},{"location":"configuration-example/#roles-and-role-bindings","title":"Roles and role bindings","text":"<p>Roles and role bindings are defined as follows (following the model of the Kubernetes RBAC authorisation):</p> <pre><code>role_bindings:\n  - name: pod_reader_role_binding\n    subjects:\n      - name: default\n        kind: ServiceAccount\n    role:\n        name: pod_reader_role\n        api_group: rbac.authorization.k8s.io\n        verbs:\n          - get\n          - list\n          - watch\n        resources:\n          - pods\n          - pods/log\n    persist: false\n</code></pre> <p>If the <code>persist</code> boolean flag is set to <code>false</code>, both the role and role binding are deleted when the pod is disposed.</p>"},{"location":"configuration-example/#image-pull-secrets","title":"Image Pull Secrets","text":"<p>Image Pull Secrets are defined with:</p> <pre><code>image_pull_secrets:\n  - data: \"eyJhdXRocyI6eyJjci50ZXJyYWR1ZS5jkdWWWVXTnpiMVZuTm14VmJUWkllWGhUIn19fQ==\"\n    name: \"cr-config\"\n    persist: false\n</code></pre>"},{"location":"configuration-example/#init-containers","title":"Init Containers","text":"<p>This init container use an <code>.init.sh</code> mounted from a configMap and a volume to contextualize the environment:</p> <pre><code>init_containers:\n  - command:\n    - sh\n    - /opt/init/.init.sh\n    image: bitnami/git:latest\n    name: init-file-on-volume\n    volume_mounts:\n    - mount_path: /workspace\n      name: workspace-volume\n    - mount_path: /opt/init/.init.sh\n      name: init\n      sub_path: init\n</code></pre> <p>The configMap <code>init</code> is created with:</p> <pre><code>- config_maps:\n  - name: init\n    key: init\n    content: |-\n      echo \"# Hello World!\" &gt; /workspace/README.md\n    default_mode: null\n    mount_path: /opt/init/.init.sh\n    persist: false\n    readonly: true\n</code></pre>"},{"location":"jupyterhub-api-example/","title":"Using JupyterHub API","text":"<p>See JupyterHub documentation for more information on the JupyterHub API.</p> <p>The code examples below show how the JupyterHub REST API can be used with Python and the <code>requests</code> module.</p>"},{"location":"jupyterhub-api-example/#obtain-an-api-token","title":"Obtain an API token","text":"<p>In order to use the API, an API token must be obtained. This requires the username and password of an admin or other user with the necessary privileges.</p> <pre><code>import requests\n\nendpoint = \"https://app-hub.acme.com/hub/api\"\n\nheaders = {'Content-Type': 'application/json'}\n\ndata = {\n  \"username\": \"&lt;username&gt;\"\n  \"password\": \"&lt;password&gt;\"\n}\n\nr = requests.get(f\"{endpoint}/authorizations/token\", headers=headers, json=data, verify=False)\n\ntoken = r.json()['token']\n</code></pre>"},{"location":"jupyterhub-api-example/#groups","title":"Groups","text":""},{"location":"jupyterhub-api-example/#list-groups","title":"List groups","text":"<pre><code>import requests\n\nendpoint = \"https://app-hub.acme.com/hub/api\"\ntoken = \"d...8\"   # previously obtained API token\n\nheaders = {'Content-Type': 'application/json', 'Authorization': f'Bearer {token}'}\n\nr = requests.get(f\"{endpoint}/groups\", headers=headers, verify=False)\n\nr.json()\n</code></pre>"},{"location":"jupyterhub-api-example/#create-group","title":"Create group","text":"<pre><code>import requests\n\nendpoint = \"https://app-hub.acme.com/hub/api\"\ntoken = \"d...8\"   # previously obtained API token\n\nheaders = {'Content-Type': 'application/json', 'Authorization': f'Bearer {token}'}\n\ngroup = 'group-a'\n\nr = requests.post(f\"{endpoint}/groups/{group}\", headers=headers, verify=False)\nr.status_code\nr.json()\n</code></pre>"},{"location":"jupyterhub-api-example/#add-user-to-group","title":"Add user to group","text":"<pre><code>import requests\n\nendpoint = \"https://app-hub.acme.com/hub/api\"\ntoken = \"d...8\"   # previously obtained API token\n\nheaders = {'Content-Type': 'application/json', 'Authorization': f'Bearer {token}'}\n\ngroup = 'group-a'\n\ndata = {\n  \"users\": [\"mrossi\"]\n}\n\nr = requests.post(f\"{endpoint}/groups/{group}/users\", headers=headers, json=data, verify=False)\nr.status_code\n</code></pre>"},{"location":"jupyterhub-api-example/#remove-user-from-group","title":"Remove user from group","text":"<pre><code>import requests\n\nendpoint = \"https://app-hub.acme.com/hub/api\"\ntoken = \"d...8\"   # previously obtained API token\n\nheaders = {'Content-Type': 'application/json', 'Authorization': f'Bearer {token}'}\n\ngroup = 'group-a'\n\ndata = {\n  \"users\": [\"mrossi\"]\n}\n\nr = requests.delete(f\"{endpoint}/groups/{group}/users\", headers=headers, json=data, verify=False)\n\nr.json()\n</code></pre>"},{"location":"jupyterhub-api-example/#named-servers","title":"Named servers","text":""},{"location":"jupyterhub-api-example/#create-a-named-server","title":"Create a named server","text":"<pre><code>import requests\n\nendpoint = \"https://app-hub.acme.com/hub/api\"\ntoken = \"d...8\"   # previously obtained API token\n\nheaders = {'Content-Type': 'application/json', 'Authorization': f'Bearer {token}'}\n\ndata = {\"profile\": \"profile_1_slug\"}\n\nserver_name = \"labs\"\n\nuser = \"mrossi\"\nr = requests.post(f\"{endpoint}/users/{user}/servers/{server_name}\", headers=headers, json=data, verify=False)\n\nr.status_code, r.text\n</code></pre>"}]}